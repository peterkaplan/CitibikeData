if(x >= 3.5) {
GPA <- “GoodJob”
} else if(x <= 3.5) {
GPA <- “PickItUp”
}
TVLevel
}
CalculateGPA <- function(x) {
GPA ="if(x >= 3.5)" {
GPA <- “GoodJob”
} else if(x <= 3.5) {
GPA <- “PickItUp”
}
TVLevel
}
CalculateGPA <- function(x) {
GPA <- " “
if(x > 3.5) {
GPA <- “GoodJob”
} else {
GPA <- “PickItUp”
}
GPA
}
> calculateGPA <- function(x) {
+     if(x > 3.5){
+         GPA <- "GOODJOB"
+     } else {
+         GPA <- "PICKITUP"
+     }
+     GPA
+ }
> calculateGPA()
> calculateGPA <- function(x) {
+     if(x > 3.5){
+         GPA <- "GOODJOB"
+     } else {
+         GPA <- "PICKITUP"
+     }
+     GPA
+ }
> calculateGPA()
calculateGPA <- function(x) {
if(x > 3.5){
GPA <- "GOODJOB"
} else {
GPA <- "PICKITUP"
}
GPA
}
calculateGPA(2)
GPA <- ""
CalculateGPA <- function(x) {
if(x > 3.5) {
GPA <- “GoodJob”
} else {
GPA <- “PickItUp”
}
GPA
}
CalculateGPA <- function(x) {
if(x > 3.5) {
GPA <- "GoodJob"
} else {
GPA <- "PickItUp"
}
GPA
}
CalculateGPA(3.1)
install.packages("nycflights13")
nyc$carrier <- as.factor(nyc$carrier)
nyc <- nycflights13
nyc <- "nycflights13"
nyc$carrier <- as.factor(nyc$carrier)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
str(diamonds)
baseplot <- ggplot (data=diamonds, aes(x=carat, y=price))
baseplot
geomplot <- baseplot + geom_point()
geomplot
baseplotcolor <- ggplot(data=diamonds, aes(x=carat, y=price, colour=color))
baseplotcolor
baseplotcolor + geom_point(size=3, alpha=1)
baseplotcolor + geom-point(size=1, alpha=0.25)
baseplotcolor + geom_point(size=1, alpha=0.25)
install.packages(maps)
install.packages("maps")
library(maps)
USStates <- map_data("state")
str(USStates)
install.packages(USarrests)
install.packages(USArrests)
arrests <- USArrests #Create a copy
names(arrests) <- tolower(names(arrests)) #Converts column name to lower case
arrests$region <- tolower(rownames(USArrests)) #Same for row names
arrests <- USArrests
names(arrests) <- tolower(names(arrests))
arrests$region <- tolower(rownames(USArrests))
arrestsbyregion <- merge(USStates, arrests, sort = FALSE, by = "region")
arrestsbyregion <- arrestsbyregion[order(arrestsbyregion$order), ]
arrestsbyregion
ggplot(data=arrestsbyregion, aes(x=long, y=lat, group=group, fill=murder)) + geom_polygon()
head(nycflights13)
install.packages(nycflights13)
library(nycflights13)
library("dplyr")
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
summary(citibike)
read.csv("citibike (2).csv")
setwd("~/Documents/Advanced Analytics (TO414)/Group Project -  Citibike")
citibike <- read.csv("citibike.csv")
read.csv("citibike.csv")
setwd("~/Desktop/CitibikeData")
summary(citi)
citi <- read.csv("sample_data.csv")
head(citi)
summary(citi)
summary(citi)
ggplot(citi) + geom_histogram(aes(birth.year))
library("ggplot2")
library("ggplot2")
library("dplyr")
library("tidyr")
download.packages("tidyr")
ggplot(citi) + geom_histogram(aes(birth.year))
ggplot(data) + geom_bar(aes(usertype), fill="white", colour="darkorange", width=0.2)
head(citi)
ggplot(citi) + geom_bar(aes(usertype), fill="white", colour="darkorange", width=0.2)
ggplot(citi) + geom_bar(aes(usertype), fill="blue", colour="darkblue", width=0.2)
ggplot(citi) + geom_bar(aes(usertype, y = (..count..)/sum(..count..)), fill="blue", colour="darkblue", width=0.2) + ylab("Proportion")
levels(data$gender) <- c("UNKNOWN", "MALE", "FEMALE")
data$gender     <- as.factor(data$gender)
levels(citi$gender) <- c("UNKNOWN", "MALE", "FEMALE")
ggplot(citi) + geom_bar(aes(gender, y = (..count..)/sum(..count..)), fill="blue") + ylab("Proportion") + theme_bw()
ggplot(citi) + geom_bar(aes(usertype, y = (..count..)/sum(..count..)), fill="blue", colour="darkblue", width=0.2) + ylab("Proportion")
ggplot(citi) + geom_bar(aes(usertype, y = (..count..)/sum(..count..)), fill="blue", colour="darkblue", width=0.2) + ylab("Proportion") +xlab("Usertype")
boxplot(citi$tripduration)
tripdurr <- filter(citi, tripduration < 5000)
boxplot(tripdurr$tripduration)
boxplot(citi$tripduration)
boxplot(tripdurr$tripduration)
boxplot(citi$tripduration)
boxplot(tripdurr$tripduration)
ggplot(citi) + geom_bar(aes(gender, y = (..count..)/sum(..count..)), fill="blue") + ylab("Proportion") +xlab("Gender") + theme_bw()
ggplot(citi) + geom_bar(aes(gender, y = (..count..)/sum(..count..)), fill="blue") + ylab("Proportion") +xlab("Gender") + theme_bw()
data %>% filter(gender != "UNKNOWN") %>% ggplot(.)  + geom_density(aes(birth.year,group=gender, fill=gender, colour=gender), adjust=3, alpha=0.1)
data %>% filter(gender != "0") %>% ggplot(.)  + geom_density(aes(birth.year,group=gender, fill=gender, colour=gender), adjust=3, alpha=0.1)
citi %>% filter(gender != "0") %>% ggplot(.)  + geom_density(aes(birth.year,group=gender, fill=gender, colour=gender), adjust=3, alpha=0.1)
citi %>% filter(gender != "0") %>% ggplot(.)  + geom_density(aes(birth.year,group=gender, fill=gender, colour=gender), adjust=3, alpha=0.1) + xlab("Year of Birth")
citi %>% filter(gender != "0") %>% ggplot(.)  + geom_density(aes(birth.year,group=gender, fill=gender, colour=gender), adjust=3, alpha=0.1) + xlab("Year of Birth") + ylab("Density")
citiinminutes  <- mutate(data, tripduration.min = tripduration/60)
library("dplyr")
citiinminutes  <- mutate(data, tripduration.min = tripduration/60)
data$tripduration <- as.integer(data$tripduration)
citi$tripdurationinteger <- as.integer(citi$tripduration)
citiinminutes  <- mutate(citi, tripdurationinteger.min = tripdurationinteger/60)
x.max <- quantile(data$tripduration.min, 0.99)
x.max <- quantile(data$tripdurationinteger.min, 0.99)
x.max <- quantile(citi$tripdurationinteger.min, 0.99)
ggplot(data) + geom_histogram(aes(tripduration)) + xlim(c(0, x.max))
x.max <- quantile(citiinminutes$tripdurationinteger.min, 0.99)
ggplot(citiinminutes) + geom_histogram(aes(tripduration)) + xlim(c(0, x.max))
ggplot(citiinminutes) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, x.max))
citi$tripdurationinteger <- as.integer(citi$tripduration)
citi  <- mutate(citi, tripdurationinteger.min = tripdurationinteger/60)
x.max <- quantile(citi$tripdurationinteger.min, 0.99)
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, x.max))
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, x.max))
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, 100))
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, "x.max"))
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0,x.max))
x.max <- quantile(citi$tripdurationinteger.min, 0.99)
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, 100000000000000000))
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, 5000))
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, 6000))
ggplot(citi) + geom_histogram(aes(tripdurationinteger)) + xlim(c(0, 5000))
install.packages("tidyr")
install.packages("ggmap")
help(fread)
??fread
weather <- as.tibble(fread("../input/weather-data-in-new-york-city-2016/weather_data_nyc_centralpark_2016.csv"))
library("dplyr")
weather <- as.tibble(fread("../input/weather-data-in-new-york-city-2016/weather_data_nyc_centralpark_2016.csv"))
help("as_tibble")
help("as.tibble")
read.csv.("weather_data_nyc_centralpark_2016(1).csv")
read.csv("weather_data_nyc_centralpark_2016(1).csv")
weather <- read.csv("weather_data_nyc_centralpark_2016(1).csv")
weather as_tibble(fread(weather))
weather <- as_tibble(fread(weather))
weather <- as_tibble((weather))
glimpse(weather)
weather <- weather %>%
mutate(date = dmy(date),
rain = as.numeric(ifelse(precipitation == "T", "0.01", precipitation)),
s_fall = as.numeric(ifelse(`snow fall` == "T", "0.01", `snow fall`)),
s_depth = as.numeric(ifelse(`snow depth` == "T", "0.01", `snow depth`)),
all_precip = s_fall + rain,
has_snow = (s_fall > 0) | (s_depth > 0),
has_rain = rain > 0,
max_temp = `maximum temerature`,
min_temp = `minimum temperature`)
help(dmy)
help("dmy")
??dmy
library("lubridate")
weather <- weather %>%
mutate(date = dmy(date),
rain = as.numeric(ifelse(precipitation == "T", "0.01", precipitation)),
s_fall = as.numeric(ifelse(`snow fall` == "T", "0.01", `snow fall`)),
s_depth = as.numeric(ifelse(`snow depth` == "T", "0.01", `snow depth`)),
all_precip = s_fall + rain,
has_snow = (s_fall > 0) | (s_depth > 0),
has_rain = rain > 0,
max_temp = `maximum temerature`,
min_temp = `minimum temperature`)
View(weather)
weather <- weather %>%
mutate(date = dmy(date),
rain = as.numeric(ifelse(precipitation == "T", "0.01", precipitation)),
s_fall = as.numeric(ifelse(`snow fall` == "T", "0.01", `snow.fall`)),
s_depth = as.numeric(ifelse(`snow depth` == "T", "0.01", `snow.depth`)),
all_precip = s_fall + rain,
has_snow = (s_fall > 0) | (s_depth > 0),
has_rain = rain > 0,
max_temp = `maximum temerature`,
min_temp = `minimum temperature`)
weather <- weather %>%
mutate(date = dmy(date),
rain = as.numeric(ifelse(precipitation == "T", "0.01", precipitation)),
s_fall = as.numeric(ifelse(`snow.fall` == "T", "0.01", `snow.fall`)),
s_depth = as.numeric(ifelse(`snow.depth` == "T", "0.01", `snow.depth`)),
all_precip = s_fall + rain,
has_snow = (s_fall > 0) | (s_depth > 0),
has_rain = rain > 0,
max_temp = `maximum temerature`,
min_temp = `minimum temperature`)
weather <- weather %>%
mutate(date = dmy(date),
rain = as.numeric(ifelse(precipitation == "T", "0.01", precipitation)),
s_fall = as.numeric(ifelse(`snow.fall` == "T", "0.01", `snow.fall`)),
s_depth = as.numeric(ifelse(`snow.depth` == "T", "0.01", `snow.depth`)),
all_precip = s_fall + rain,
has_snow = (s_fall > 0) | (s_depth > 0),
has_rain = rain > 0,
max_temp = `maximum.temerature`,
min_temp = `minimum.temperature`)
weather <- weather %>%
mutate(date = dmy(date),
rain = as.numeric(ifelse(precipitation == "T", "0.01", precipitation)),
s_fall = as.numeric(ifelse(`snow.fall` == "T", "0.01", `snow.fall`)),
s_depth = as.numeric(ifelse(`snow.depth` == "T", "0.01", `snow.depth`)),
all_precip = s_fall + rain,
has_snow = (s_fall > 0) | (s_depth > 0),
has_rain = rain > 0,
max_temp = `maximum.temperature`,
min_temp = `minimum.temperature`)
head(weather)
foo <- weather %>%
select(date, rain, s_fall, all_precip, has_snow, has_rain, s_depth, max_temp, min_temp)
help("left_join")
citi <- left_join(citi, foo, by = "date")
help("mdy")
help("wday")
library("magrittr")
citi$startdate <- mdy(citibike$starttime)
citi <- left_join(citi, foo, by = "date")
citi <- left_join(citi, foo, by = "starttime")
foo <- weather %>%
select(date, rain, s_fall, all_precip, has_snow, has_rain, s_depth, max_temp, min_temp)
citi$startdate <- mdy(citibike$starttime)
citi$startdate <- mdy(citi$starttime)
View(citi)
citi$startdate <- as_date(citi$starttime)
citi$startdate <- as.date(citi$starttime)
citi$startdate <- as.date(citi$starttime)
citi$startdate <- as.Date(citi$starttime)
weather$starttime <- as.Date.POSIXct(weather$date)
citi$startdate <- as.Date(parse_date_time(citi$starttime,"dmy"))
citi$startdate <- as.Date(parse_date_time(citi$starttime,"mdy"))
help("parse_date_time")
citi$startdate <- as.Date(parse_date_time(citi$starttime,"mdy hms"))
citi$startdate <- as.Date(parse_date_time(citi$starttime,"mdy HMS"))
weather$starttime <- as.Date(parse_date_time(citi$starttime,"mdy HMS"))
setwd("~/Desktop/CitibikeData")
setwd("~/Documents/Advanced Analytics (TO414)/Classes/Class 11 (12.10)")
binary <- read.csv ("binary.csv")
str(binary)
binary$rank <- as.factor(binary$rank)
str(binary)
probs <- seq(0, 1, 0.001)
plot(probs)
odds=probs/(1-probs)
logodds=log(odds)
plot(probs, logodds)
plot(logodds, probs)
logit.model <- glm(admit ~ gre + gpa + rank, data = binary, family = "binomial")
summary(logit.model)
read.csv("train.csv")
train <- read.csv("train.csv")
str(train)
View(train)
coefflist <- cbind(0,0,0,0,1,-1)
wald.test(b = coef(logit.model), Sigma = vcov(logit.model),
L = coefflist)
wald.test(b = coef(logit.model), Sigma = vcov(logit.model),
L = coefflist)
coefflist <- cbind(0,0,0,1,1,1)
wald.test(b = coef(logit.model), Sigma = vcov(logit.model),
L = coefflist)
admitnew <- data.frame(gre = 700, gpa = 3.9, rank = 1)
admitnew$rank = factor(admitnew$rank)
predict(logit.model, newdata = admitnew, type = "response")
install.packages("VGAM")
library(VGAM)
probitdata <- probit(probs)
plot(probitdata, probs)
plot(probs, probitdata)
probit.model <- glm(admit ~ gre + gpa + rank, data = binary, family = binomial(link="probit"))
summary(probit.model)
predict(probit.model, newdata = admitnew,  type = "response")
admitnew <- data.frame(gre = 70, gpa = 1.2, rank = 4)
admitnew$rank <- as.factor(admitnew$rank)
predict(probit.model, newdata = admitnew,  type = "response")
predict(logit.model, newdata = admitnew,  type = "response")
as.factor("train$embarked")
read.csv("train")
read.csv("train.csv")
train <- read.csv("train.csv")
as.factor("train$Pclass")
as.factor("train$Pclass")
library(lmtest)
logit.model <- glm(admit ~ Pclass + Sex + Parch + SibSp + Fare + Age, data = train, Survived = "binomial")
logit.model <- glm(Survive ~ Pclass + Sex + Parch + SibSp + Fare + Age, data = train, Survived = "binomial")
logit.model <- glm(Survived ~ Pclass + Sex + Parch + SibSp + Fare + Age, data = train, Survived = "binomial")
logit.model <- glm(Survived ~ Pclass + Sex + Parch + SibSp + Fare + Age, data = train, family = "binomial")
str(logit.model)
summary(logit.model)
summary(logit.model2)
logit.model2 <- glm(Survived ~ Pclass + Sex + SibSp + Fare + Age, data = train, family = "binomial")
summary(logit.model2)
as.factor("train$Pclass")
# Build a logit model with Survival as the response variable
logit.model <- glm(Survived ~ Pclass + Sex + Parch + SibSp + Fare + Age, data = train, family = "binomial")
summary(logit.model)
logit.model2 <- glm(Survived ~ Pclass + Sex + SibSp + Fare + Age, data = train, family = "binomial")
summary(logit.model2)
# Decide what structure is appropriate, do you need interaction effects?
citi <- left_join(citi, foo, by = "starttime")
citi <- left_join(citi, foo, by = "startdate")
citi <- left_join(citi, foo, by = "startdate")
help("left_join")
weather$startdate <- weather$date
weather$startdate <- weather$date
citi <- left_join(citi, foo, by = "startdate")
View(foo)
foo$startdate <- foo$date
citi <- left_join(citi, foo, by = "startdate")
foo <- weather %>%
select(date, rain, s_fall, all_precip, has_snow, has_rain, s_depth, max_temp, min_temp)
citi$startdate <- mdy(citi$starttime)
citi$weekday <- wday(citi$startdate, label=TRUE)
foo$startdate <- foo$date
citi <- left_join(citi, foo, by = "startdate")
citi$date.y <- NULL
citi$rain.y <- NULL
citi$weekday <- NULL
citi$s_fall.y <- NULL
p1 <- citi %>%
group_by(date) %>%
count() %>%
ggplot(aes(date,n/1e3)) +
geom_line(size = 1.5, color = "red") +
labs(x = "", y = "Kilo trips per day")
p1 <- citi %>%
group_by(date.x) %>%
count() %>%
ggplot(aes(date,n/1e3)) +
geom_line(size = 1.5, color = "red") +
labs(x = "", y = "Kilo trips per day")
p1 <- citi %>%
group_by(date.x) %>%
count() %>%
ggplot(aes(date,n/1e3)) +
geom_line(size = 1.5, color = "red") +
labs(x = "", y = "Kilo trips per day")
p2 <- citi %>%
group_by(date.x) %>%
summarise(trips = n(),
snow_fall = mean(s_fall),
rain_fall = mean(rain),
all_precip = mean(all_precip)) %>%
ggplot(aes(date, snow_fall)) +
geom_line(color = "blue", size = 1.5) +
labs(x = "", y = "Snowfall") +
scale_y_sqrt() +
scale_x_date(limits = ymd(c("2016-02-01", "2016-08-31")))
p2 <- citi %>%
group_by(date.x) %>%
summarise(trips = n(),
snow_fall = mean(s_fall.x),
rain_fall = mean(rain.x),
all_precip = mean(all_precip.x)) %>%
ggplot(aes(date, snow_fall)) +
geom_line(color = "blue", size = 1.5) +
labs(x = "", y = "Snowfall") +
scale_y_sqrt() +
scale_x_date(limits = ymd(c("2016-02-01", "2016-08-31")))
p3 <- citi %>%
group_by(date) %>%
summarise(trips = n(),
snow_depth = mean(s_depth.x)) %>%
ggplot(aes(date, snow_depth.x)) +
geom_line(color = "purple", size = 1.5) +
labs(x = "", y = "Snow depth") +
scale_y_sqrt() +
scale_x_date(limits = ymd(c("2016-02-01", "2016-08-31")))
p3 <- citi %>%
group_by(date.x) %>%
summarise(trips = n(),
snow_depth = mean(s_depth.x)) %>%
ggplot(aes(date, snow_depth.x)) +
geom_line(color = "purple", size = 1.5) +
labs(x = "", y = "Snow depth") +
scale_y_sqrt() +
scale_x_date(limits = ymd(c("2016-02-01", "2016-08-31")))
layout <- matrix(c(1,2,3,),3,1,byrow=FALSE)
layout <- matrix(c(1,2,3),3,1,byrow=FALSE)
multiplot(p1, p2, p3, layout=layout)
help(multiplot)
??multiplot
library(ggplot2)
help(multiplot)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
multiplot <- function(..., plotlist = NULL, file, cols = 1, layout = NULL) {
require(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots == 1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, layout=layout)
library(grid)
multiplot(p1, p2, p3, layout=layout)
plot(p3)
plot(p1)
plot(p2)
plot(p3)
p3 <- citi %>%
group_by(date.x) %>%
summarise(trips = n(),
snow_depth = mean(s_depth.x)) %>%
ggplot(aes(date, s_depth.x)) +
geom_line(color = "purple", size = 1.5) +
labs(x = "", y = "Snow depth") +
scale_y_sqrt() +
scale_x_date(limits = ymd(c("2016-02-01", "2016-08-31")))
plot(p3)
plot(p2)
p7 <- citi %>%
group_by(date.x) %>%
summarise(trips = n(),
snow_fall = mean(s_fall.x),
rain_fall = mean(rain.x),
all_precip = mean(all_precip.x))
p7 <- as.data.frame(p7)
head(p7)
plot(p7$date.x, p7$snow_fall)
ggplot(aes(date.x, snow_fall)) +
geom_line(color = "blue", size = 1.5) +
labs(x = "", y = "Snowfall") +
scale_y_sqrt() +
scale_x_date(limits = ymd(c("2016-02-01", "2016-08-31")))
ggplot(aes(p7$date.x, p7$snow_fall)) +
geom_line(color = "blue", size = 1.5) +
labs(x = "", y = "Snowfall") +
scale_y_sqrt() +
scale_x_date(limits = ymd(c("2016-02-01", "2016-08-31")))
hist(p7$date.x, p7$snow_fall)
hist(p7$date.x, p7$snow_fall)
help(hist)
barplot(p7$date.x, p7$snow_fall)
#Notetoself - May just wanna go ahead and start over with merging the two datasets, as something has gone wrong at one point (snowfall throughout the year). Use function merge, as per Sanjeev. Could then push up the dataset including weather and then continue working on it from scratch.
help("merge")
weather2 <- read.csv(weather_data_nyc_centralpark_2016(1).csv)
weather2 <- read.csv(weather2.csv)
weather2 <- read.csv("weather2.csv")
setwd("~/Desktop/CitibikeData")
weather2 <- read.csv("weather2.csv")
View(weather2)
read.csv("weather_data")
read.csv("weather_data.csv")
weatherclass <- read.csv("weather_data.csv")
View(weatherclass)
View(Citi)
View(citi)
